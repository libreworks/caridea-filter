<?php
namespace Caridea\Filter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-16 at 12:01:32.
 */
class StringsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Filter\Strings::coerce
     */
    public function testCoerce()
    {
        $this->assertEquals('', Strings::coerce(null));
        $this->assertEquals('', Strings::coerce(false));
        $this->assertEquals('123', Strings::coerce(123));
        $this->assertEquals('123.4', Strings::coerce(123.4));
        $this->assertEquals('foo', Strings::coerce("foo"));
        $this->assertEquals('hello', Strings::coerce(new class {
            public function __toString() { return 'hello'; }
        }));
    }

    /**
     * @covers Caridea\Filter\Strings::coerce
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Could not convert to string: array
     */
    public function testCoerceFail()
    {
        Strings::coerce([]);
    }

    /**
     * @covers Caridea\Filter\Strings::toString
     */
    public function testToString()
    {
        $f = Strings::toString();
        $this->assertEquals('', $f(null));
        $this->assertEquals('hey', $f('hey'));
        $this->assertEquals('123', $f(123));
    }

    /**
     * @covers Caridea\Filter\Strings::lowerCase
     */
    public function testLowerCase()
    {
        $f = Strings::lowerCase();
        $this->assertEquals('foo', $f('FOO'));
        $this->assertEquals('foo', $f('FoO'));
        $this->assertEquals('féä', $f('FÉÄ'));
    }

    /**
     * @covers Caridea\Filter\Strings::upperCase
     */
    public function testUpperCase()
    {
        $f = Strings::upperCase();
        $this->assertEquals('FOO', $f('foo'));
        $this->assertEquals('FÉÄ', $f('féä'));
        $this->assertEquals('ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ', $f('Τάχιστη αλώπηξ'));
    }

    /**
     * @covers Caridea\Filter\Strings::titleCase
     */
    public function testTitleCase()
    {
        $f = Strings::titleCase();
        $this->assertEquals('Foo', $f('foo'));
        $this->assertEquals('Féä', $f('féä'));
        $this->assertEquals('Τάχιστη Αλώπηξ', $f('τάχιστη αλώπηξ'));
    }

    /**
     * @covers Caridea\Filter\Strings::trim
     */
    public function testTrim()
    {
        $f = Strings::trim();
        $this->assertEquals('foobar', $f('    foobar  '));
        $this->assertEquals('foobar', $f("  \t   foobar  \n  "));
        $this->assertEquals('foobar', $f("foobar"));
    }

    /**
     * @covers Caridea\Filter\Strings::replace
     */
    public function testReplace()
    {
        $f = Strings::replace('foo', 'bar');
        $this->assertEquals('barbar', $f('foobar'));
        $this->assertEquals('bar bar bar', $f('foo foo foo'));
    }

    /**
     * @covers Caridea\Filter\Strings::regex
     */
    public function testRegex()
    {
        $f = Strings::regex("/foo/i", 'bar');
        $this->assertEquals('barbar', $f('Foobar'));
        $this->assertEquals('bar bar bar', $f('FOO FoO foo'));
    }

    /**
     * @covers Caridea\Filter\Strings::alnum
     */
    public function testAlnum()
    {
        $f = Strings::alnum();
        $this->assertEquals('ABCDEFé1234', $f('AB@C!!D  E~Fé1234_'));
    }

    /**
     * @covers Caridea\Filter\Strings::alpha
     */
    public function testAlpha()
    {
        $f = Strings::alpha();
        $this->assertEquals('ABCDEFé', $f('AB@C!!D  E~Fé1234_'));
    }

    /**
     * @covers Caridea\Filter\Strings::numeric
     */
    public function testNumeric()
    {
        $f = Strings::numeric();
        $this->assertEquals('६1¾234', $f('AB६@C!!D  E~Fé1¾234_'));
    }

    /**
     * @covers Caridea\Filter\Strings::unixNewlines
     */
    public function testUnixNewlines()
    {
        $f = Strings::unixNewlines();
        $this->assertEquals("\nHello there\nfriend\n", $f("\rHello there\r\nfriend\n"));
    }

    /**
     * @covers Caridea\Filter\Strings::compactNewlines
     */
    public function testCompactNewlines()
    {
        $f = Strings::compactNewlines();
        $this->assertEquals("\nHello there\n\nfriend\n\n", $f("\nHello there\n\n\n\n\nfriend\n\n"));
    }
}
